@import url('reset.css');

* {
   color: red;
}

header {
   color: pink;
}


/* Нічого не міняє, хоча йде далі по коду і має вищий пріоритет, 
ніж зірочка, скоріш за все через унаслідування кольорів, 
якщо додати додаткові параметри (спец символи, теги тощо), тоді спрацює  */
.article-item {
   color: purple;
}

#facts {
   color: purple;
}


/* Шукає теги р усередині тегів з класом, в якому є сполучення слів em */
[class*=em] p {
   color: green;
}

/* Змінює всі теги а, в атрибуті title яких є конкретний текст */
a[title="Перейти до розділу про писанку"] {
   color: brown;
}

/* Змінює всі посилання в навігації, крім другого, бо у нього вищий пріоритет. Виконує
пошук по тегам з атрибутом title, який містить "Перейти" у value */
[title~="Перейти"] {
   color: yellowgreen;
}


/* легко перебиває по пріоритету зірочку */
h1,
h2,
h3 {
   color: blue;
}

/* шукає теги h3 з конкретним айді - сенсу немає особливо, бо айді може бути 
тільки одним, унікальним на сторінці, але спробувтаи було цікаво) */
h3#facts {
   color: orange;
}

/* поміняли та перебили стиль заголовків h2 з класом sub-title,
більше уточнень і більший пріоритет */
h2.sub-title {
   color: black;
}

/* перебили колір абсолютно усіх абзаців в тегах р, які знаходяться в тегах div,
які в свою чергу знаходяться в елементах (в нашому випадку - елементі) з класом article 
перебивання стало можливим завдакти*/
.article div p {
   color: chocolate;
}

/* не перебиває кольори, так як селектор по атрибуту має вищий пріоритет
ніж навіть вкладеність двох тегів */
ul li {
   color: cornflowerblue;
}

/* автоформатування чогось зліплює спецсимвол з класом і тегом, це можна якось пофіксити?
у тегу main в елементах з класом article-item на першому рівні вкладеності шукаємо
та приміняємо властивість кольору до усіх дочірніх елементів  */
main .article-item>ol * {
   color: yellow;
}

/* шукаємо усі теги mark будь-якого рівня вкладеності в теги li,
які в свою чергу на першому рівні вкладності для ol, а ol на першому рівні вкладеності
для елементу з класом article-item
мега-уточнююча комбінація селекторів, тому звичайно перебиває попередні форматування*/
.article-item>ol>li mark {
   color: brown;
}

/* вище ми вказували більше детальні та уточненні комбінації селекторі при зверненні
до цього списку, тому звичайно навіть "дальність" по коду тут не спрацює,
тому попрактикуємо заборонене закляття - !important */
li span {
   color: black !important;
}

/* добиваємось перебиття пріоритетності, завдяки двом класам і тегам, пошук відбувається
по елементам р, які йдуть після h2 усередині об'єктів з класом article-item, які
в свою чергу знаходяться в елементах з класом article */
.article .article-item h2~p {
   color: black;
}

/* добився поставленою задачі - майже всюди прибрати жовтий колір з нумерованого
списку, але так, щоб два заголовки лишились іншого кольору
тут я звернулся до тегів li які йдуть за тегами li далі по коду і на тому ж рівні
вкладності, знаходяться в ol, а ol в об'єкті з класом article-item
як і планувалось - перша строка (саме текст, визначення) - лишилось жовтим кольором,
бо код спрацює починаючи з другого li */
.article-item ol li+li {
   color: black;
}
